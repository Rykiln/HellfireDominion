import type { ApiClient } from '../../../ApiClient';
import type { HelixUser } from '../User/HelixUser';
/** @private */
export interface HelixSubscriptionData {
    broadcaster_id: string;
    broadcaster_login: string;
    broadcaster_name: string;
    gifter_id: string;
    gifter_login: string;
    gifter_name: string;
    is_gift: boolean;
    plan_name: string;
    tier: string;
    user_id: string;
    user_login: string;
    user_name: string;
    message?: string;
}
/**
 * A (paid) subscription of a user to a broadcaster.
 */
export declare class HelixSubscription {
    private readonly _data;
    private readonly _client;
    /** @private */
    constructor(data: HelixSubscriptionData, client: ApiClient);
    /**
     * The user ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser | null>;
    /**
     * The user ID of the gifter.
     */
    get gifterId(): string;
    /**
     * The name of the gifter.
     */
    get gifterName(): string;
    /**
     * The display name of the gifter.
     */
    get giftName(): string;
    /**
     * Retrieves more information about the gifter.
     */
    getGifter(): Promise<HelixUser | null>;
    /**
     * Whether the subscription has been gifted by another user.
     */
    get isGift(): boolean;
    /**
     * The tier of the subscription.
     */
    get tier(): string;
    /**
     * The user ID of the subscribed user.
     */
    get userId(): string;
    /**
     * The name of the subscribed user.
     */
    get userName(): string;
    /**
     * The display name of the subscribed user.
     */
    get userDisplayName(): string;
    /**
     * Retrieves more information about the subscribed user.
     */
    getUser(): Promise<HelixUser | null>;
}
